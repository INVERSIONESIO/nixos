self: let
  inherit (import ./binds.nix self) mainMod binds mouseBinds;
  inherit (self) host;

  window = import ./window.nix;
  exec = {
    always = [
      "pkill waybar & sleep 0.1 && waybar"
    ];

    once = [
      "${self.pkgs.wl-clipboard}/bin/wl-paste --watch ${self.pkgs.cliphist}/bin/cliphist store -max-items 200"
      "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP"
    ];
  };

  listToPrefixedLines = prefix: list: self.lib.strings.concatMapStrings (b: prefix + b + "\n") list;

  rules = ''
    autogenerated = 0

    env = XCURSOR_SIZE,24

    input {
        numlock_by_default = true
        sensitivity = 0.2

        kb_layout = latam
        kb_variant =
        kb_model =
        kb_options =
        kb_rules =

        follow_mouse = 1

        touchpad {
            natural_scroll = no
            disable_while_typing = no
        }
    }

    misc {
        disable_hyprland_logo = true
    }

    dwindle {
        # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
        pseudotile = yes
        preserve_split = yes
    }

    master {
        # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
        new_is_master = true
    }

    gestures {
        workspace_swipe = off
    }
  '';

  monitorRules = let
    monitors =
      if builtins.length host.monitors == 0
      then [
        {
          resolution = "1920x1080";
          position = "0x0";
          scale = "1";
        }
      ]
      else host.monitors;
  in
    lib.lists.imap1 (i: m: "DP-${builtins.toString i}, ${m.resolution}, ${m.position}, ${m.scale}") monitors;
in {
  # More keysyms here: https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-keysyms.h
  xdg.configFile."hypr/hyprland.conf".text = ''
    ${listToPrefixedLines "exec-once = " exec.once}

    ${listToPrefixedLines "monitor = " monitorRules}

    ${rules}
    $mainMod = ${mainMod}

    general {
      ${window.general}
    }

    decoration {
      ${window.decoration}
    }

    animations {
      ${window.animations}
    }

    ${listToPrefixedLines "windowrulev2 = " window.rulesv2}

    ${listToPrefixedLines "exec = " exec.always}
    ${listToPrefixedLines "bind = " binds}
    ${listToPrefixedLines "bindm = " mouseBinds}
  '';
}
